Week 13 Day 03 Assignment

Q1.Climbing Stairs
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
-->
class Solution:
    def climbStairs(self, n: int) -> int:
        dp=[1]*(n+1)
        for i in range(2,n+1):
            dp[i]=dp[i-1]+dp[i-2]
        return dp[n]
Output:

2

Q2.Decode Ways
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

The answer is guaranteed to fit in a 32-bit integer.

Example 1:

Input: s = "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
-->
class Solution:
    def numDecodings(self, s: str) -> int:
        if len(s)==0 or s[0]=="0":
            return 0
        value1 = value2 = 1
        
        for i in range(1, len(s)):
            # use ord() to convert string to integer
            singleDigit = ord(s[i])-ord("0")
            
            # if s="12", i=1,
            # singleDigit s[i] is equals to 2
            # doubleDigit s[i-1]==1, then 1*10=10+2=12
            doubleDigit = (ord(s[i-1])-ord("0"))*10 + singleDigit
            
            count = 0
            # valid single digit is from 1 to 9
            if singleDigit > 0: count += value2
            
            # valid double digit is from 10 to 26
            if 10 <= doubleDigit <= 26: count += value1
                
            value1 = value2
            value2 = count
            
        return value2

Output:

2

Q3.Edit Distance
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
-->
memo = {}
        def dp(i, j):
            if i == -1: return j + 1
            if j == -1: return i + 1
            if (i, j) in memo:
                return memo[(i, j)]
            if word1[i] == word2[j]:
                memo[(i, j)] =  dp(i-1, j-1)
            else:
                memo[(i, j)] = min(
                    dp(i, j-1) + 1,
                    dp(i-1, j) + 1,
                    dp(i-1, j-1) + 1
                )
            return memo[(i, j)]
        return dp(len(word1)-1, len(word2)-1)

Output:

3

Q4. Stone Game
Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].

The objective of the game is to end with the most stones.  The total number of stones is odd, so there are no ties.

Alex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of stones from either the beginning or the end of the row.  This continues until there are no more piles left, at which point the person with the most stones wins.

Assuming Alex and Lee play optimally, return True if and only if Alex wins the game.

Example 1:

Input: piles = [5,3,4,5]
Output: true
Explanation: 
Alex starts first, and can only take the first 5 or the last 5.
Say he takes the first 5, so that the row becomes [3, 4, 5].
If Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.
If Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.
This demonstrated that taking the first 5 was a winning move for Alex, so we return true.
 -->

n = len(piles)
        
        dp = [[-1 for j in range(n+2)] for i in range(n+2)]
        
        def rec(dp, a, l, r):
            if l >= r: return 0
            if dp[l][r] != -1: return dp[l][r]
            
            sol1 = min(a[l] + rec(dp, a, l+2, r), a[l] + rec(dp, a, l+1, r-1))
            sol2 = min(a[r] + rec(dp, a, l, r-2), a[r] + rec(dp, a, l+1, r-1))
            
            dp[l][r] = max(sol1, sol2)
            
            return dp[l][r]
        
        
        return rec(dp, piles, 0, n-1) * 2 > sum(piles)

Output:

true