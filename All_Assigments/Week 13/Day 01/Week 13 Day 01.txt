Week 13 Day 01 Assignment

Q1. Minimum Path Sum
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example 1:

Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100
-->

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        rows= len(grid)
        cols= len(grid[0])
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if i>0:
                    if j>0:
                        grid[i][j]= grid[i][j] + min(grid[i][j-1], grid[i-1][j])
                    else:
                        grid[i][j]= grid[i][j]+grid[i-1][j]
                else:
                    if j>0:
                        grid[i][j]= grid[i][j]+grid[i][j-1]
        return grid[rows-1][cols-1]

Output:

7

Q2.Min Cost Climbing Stairs
On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).

Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.

Example 1:
Input: cost = [10, 15, 20]
Output: 15
Explanation: Cheapest is start on cost[1], pay that cost and go to the top.

Example 2:
Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
Output: 6

Explanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].

Note:
cost will have a length in the range [2, 1000].
Every cost[i] will be an integer in the range [0, 999]

-->
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        if n == 2:
            return min(cost)
        first = cost[0]
        second = cost[1]
        
        for i in range(2, n):
            cur = cost[i] + min(first, second)
            first = second
            second = cur
            
            
        return min(second, first)
        

Output:

15

Q3.Solve the max subsequence problem using top down dp.
-->
def MSIS(A, i=0, prev=float('-inf'), sum=0):

    # get length of the list
    n = len(A)

    # Base case: nothing is remaining
    if i == n:
        return sum

    # case 1: exclude the current element and process the
    # remaining elements
    excl = MSIS(A, i + 1, prev, sum)

    # case 2: include the current element if it is greater
    # than previous element
    incl = sum
    if A[i] > prev:
        incl = MSIS(A, i + 1, A[i], sum + A[i])

    # return maximum of above two choices
    return max(incl, excl)


if __name__ == '__main__':

    A = [8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11]
    print("Maximum sum of increasing subsequence is", MSIS(A))

Output:

Maximum sum of increasing subsequence is 34

