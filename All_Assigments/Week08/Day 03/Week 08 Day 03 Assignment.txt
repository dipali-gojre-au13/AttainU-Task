Week 08 Day 03 Assignment


Q1.Given a string s, find the length of the longest substring without repeating characters.
Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

-->
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s) == 0: 
            return 0

        start = maxLength = 0

        usedChars = {}

        for i in range(len(s)):
            if s[i] in usedChars and start <= usedChars[s[i]]:
                start = usedChars[s[i]] + 1
            else:
                maxLength = max(maxLength, i - start + 1)
            usedChars[s[i]] = i


        return maxLength

if __name__ == "__main__":
    print(Solution().lengthOfLongestSubstring("abcabcbb"))

Output:

3

Q2.Given an array of integers, find if the array contains any duplicates.

Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.

Example 1:

Input: [1,2,3,1]
Output: true

-->
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        oringin = len(nums) 
        new = len(set(nums))
        if( oringin != new): #copy
            return True
        else :
            return False
            
if __name__=="__main__":
    nums = [1,2,3,1]
    print(Solution().containsDuplicate(nums))

Another Way:
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        counter = set()
        
        for num in nums:
            if num not in counter:
                counter.add(num)
            else:
                return True
            
        return False

Time complexity : O(N).
Space complexity : O(N).

Output:

true

Q3.Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].
-->

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        container = {}
        
        for i, num in enumerate(nums):
            if target - num in container:
                return [container[target - num], i]
            container[num] = i
        return

Output:

[0, 1]

Another way  but it takes more time:

for i in range(len(nums)):
    left = nums[i+1:]
    for j in range(len(left)):
        if (nums[i] + left[j]) == target:
            return i, j+i+1

One more way :

k = 0 
for i in nums: 
    k += 1 
    if target-i in nums[k:]: 
        return(k-1, nums[k:].index(target-i) + k )


