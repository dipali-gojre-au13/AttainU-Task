Week 08 Day 05 Assignment

Q1.Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.

We repeatedly make duplicate removals on S until we no longer can.

Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.

Example 1:

Input: "abbaca"
Output: "ca"
Explanation: 
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".

-->

class Solution:
    def removeDuplicates(self, S: str) -> str:
        stack = []
        if not S:
            return ""
        for char in S:
            if not stack:
                stack.append(char)
            else:
                first = stack[-1]
                if first == char:
                    stack.pop()
                else:
                    stack.append(char)
        if not stack:
            return ""
        return ''.join(stack)

Output:

"ca"

Q2.Given a string S of '(' and ')' parentheses, we add the minimum number of parentheses ( '(' or ')', and in any positions ) so that the resulting parentheses string is valid.

Formally, a parentheses string is valid if and only if:

It is the empty string, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
Given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.

Example 1:

Input: "())"
Output: 1
-->
class Solution:
    def minAddToMakeValid(self, S: str) -> int:
        res = 0
        stack = []
        for c in S:
            if c == '(':
                stack.append('(')
            else:
                if stack:
                    stack.pop()
                else:
                    res += 1
        return res + len(stack)


Other Way:
class Solution:
    def minAddToMakeValid(self, S):
        """
        :type S: str
        :rtype: int
        """
        if not S:
            return 0
        left, right = 0, 0
        for i in S:
            if i == '(':
                left += 1
            elif left > 0:
                left -= 1
            else:
                right += 1
        return right + left


Output:

1

Q3.Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example:

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

-->
class Solution:
    def trap(self, height: List[int]) -> int:
        res = 0
        stack = []
        for i in range(len(height)):
            while stack and height[i] > height[stack[-1]]:
                h = height[stack.pop()]
                if not stack:
                    break
                res += (min(height[i], height[stack[-1]]) - h) * (i - stack[-1] - 1)
            stack.append(i)
        return res

Other Way:

maxleft = [0 for i in xrange(len(height))]
        maxright = [0 for i in xrange(len(height))]
        ml = mr = 0
        for i in xrange(len(height)):
            ml = max(ml, height[i])
            maxleft[i] = ml
        for i in xrange(len(height)-1, -1, -1):
            mr = max(mr, height[i])
            maxright[i] = mr
        
        res = 0
        for i in xrange(len(height)):
            res += max( min(maxleft[i],maxright[i])-height[i], 0)
            
        return res

Output:

6