Week 07 Day 01 Assigment

Q1.Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

-->
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        range_start = -1    
        range_end = -1    
        
        if (nums == None or len(nums) == 0):
            return [range_start, range_end]
        
        start = 0
        end = len(nums) - 1
        
        while start + 1 < end:
            mid = start + (end - start) // 2
            if nums[mid] < target:
                start = mid
            elif nums[mid] > target:
                end = mid
            else:
                start = mid
                
        if nums[end] == target:
            range_end = end
        elif nums[start] == target:
            range_end = start
            
        start = 0
        end = len(nums) - 1
        
        while start + 1 < end:
            mid = start + (end - start) // 2
            if nums[mid] < target:
                start = mid
            elif nums[mid] > target:
                end = mid
            else:
                end = mid
                
        if nums[start] == target:
            range_start = start
        elif nums[end] == target:
            range_start = end            
        
        return [range_start, range_end]

Output:
[3, 4]

Q2.Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2


-->
from typing import List

nums = [1,3,5,6]
target = 5

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
         try:
            return nums.index(target)
         except:
            for i in range(len(nums)):
                print(i)
                if nums[i] - target > 0:
                    return i
                else: 
                    print("hello", len(nums))
                    return len(nums)
if __name__ == '__main__' :
    sort_solution = Solution()
    print(sort_solution.searchInsert(nums, target))
 Output:
2

Q3.You are given an integer array nums sorted in ascending order, and an integer target.

Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

If target is found in the array return its index, otherwise, return -1.

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

-->
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        result = -1
        if nums == None or len(nums) == 0:
            return -1
        
        min_index = self.find_min_index(nums)
        
        if nums[min_index] <= target <= nums[-1]:
            return self.binary_search(nums, target, min_index, len(nums) - 1)
        
        return self.binary_search(nums, target, 0, min_index)

        
    def find_min_index(self, nums):
        start = 0
        end = len(nums) - 1
                
        while start + 1 < end:
            mid = start + (end - start) // 2

            if nums[mid] < nums[end]:
                end = mid
            else:
                start = mid
                
        if nums[start] < nums[end]:
            return start
        
        return end
    
    def binary_search(self, nums, target, start, end):
        while start + 1 < end:
            mid = start + (end - start) // 2

            if nums[mid] == target:
                return mid            
            elif nums[mid] < target:
                start = mid
            else:
                end = mid
                
        if nums[start] == target:
            return start
        elif nums[end] == target:
            return end
        
        return -1

Output: 4