

Q1. Reverse Interger
Given a 32-bit signed integer, reverse digits of an integer.

Note:
Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

Example 1:

Input: x = 123
Output: 321

-->
class Solution:
    def reverse(self, x: int) -> int:
        rev = int(str(abs(x))[::-1]) 
        if rev < -2**31 or rev > 2**31-1: 
            return 0
        else:
            if x <  0: return -rev
            if x >= 0: return rev

Output:
321

Q2. Decode String
Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].
Example 1:

Input: s = "3[a]2[bc]"
Output: "aaabcbc"
-->
class Solution:
    def decodeString(self, s: str) -> str:
        num=set()
        for i in range(0,10):
            num.add(str(i))
        def solve(s):
            stack=[]
            l=0
            for i in s:
                if i!=']':
                    stack.append(i)
                    l+=1
                else:
                    ans=""
                    while stack[-1]!='[':
                        ans=stack[-1]+ans
                        stack.pop()
                        l-=1
                    stack.pop()
                    l-=1
                    x=""
                    while l>=1 and stack[-1] in num:
                        x=stack[-1]+x
                        stack.pop()
                        l-=1
                    stack.append(ans*int(x))
                    l+=1
            return("".join(stack))  
        return solve(s)

Output:
"aaabcbc"

Q3. Merge Intervals
Given a collection of intervals, merge all overlapping intervals.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
-->
class Solution:
    def merge(self, intervals):
        intervals = sorted(intervals, key = lambda x: (x[0], x[1]))
        for i in range(1, len(intervals)):
            if intervals[i][0] <= intervals[i-1][1]:
                intervals[i] = [intervals[i-1][0], max(intervals[i][1], intervals[i-1][1])]
                intervals[i-1] = None
        return [i for i in intervals if i]

Output:

[[1,6],[8,10],[15,18]]