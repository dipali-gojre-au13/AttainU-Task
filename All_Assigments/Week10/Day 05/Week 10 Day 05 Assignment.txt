Q1. Vertical Order Traversal of a Binary Tree
Given a binary tree, return the vertical order traversal of its nodes values.

For each node at position (X, Y), its left and right children respectively will be at positions (X-1, Y-1) and (X+1, Y-1).

Running a vertical line from X = -infinity to X = +infinity, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).

If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.

Return an list of non-empty reports in order of X coordinate.  Every report will have a list of values of nodes.

Example 1:

              3
           /    \
         9         29
                   /   \
                 15      7

Input: [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Explanation: 
Without loss of generality, we can assume the root node is at position (0, 0):
Then, the node with value 9 occurs at position (-1, -1);
The nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);
The node with value 20 occurs at position (1, -1);
The node with value 7 occurs at position (2, -2).
-->
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        q = collections.deque()
        node_list = []
        q.append([root, 0, 0])
        while q:
            node, col, row = q.popleft()
            node_list.append((col, row, node.val))
            if node.left:
                q.append([node.left, col - 1, row + 1])
            if node.right:
                q.append([node.right, col + 1, row + 1])
        node_list.sort()
        ans = {}
        for col, row, val in node_list:
            if col not in ans:
                ans[col] = []
            ans[col].append(val)
            
        return ([ans[x] for x in ans])

Output:
[[9],[3,15],[20],[7]]

Q2. Number of Islands
Given an m x n 2d grid map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
-->
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 
        def dfs(grid,i,j,visited):
            if i<0 or i>=len(grid) or j<0 or j>=len(grid[0]) or grid[i][j]=='0':
                return
            if (i,j) in visited:
                return
            elif grid[i][j]=='1':
                visited[(i,j)]='unq'
            dfs(grid,i+1,j,visited)
            dfs(grid,i-1,j,visited)
            dfs(grid,i,j+1,visited)
            dfs(grid,i,j-1,visited)
            return

        visited={}
        island=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]=='1':
                    if (i,j) not in visited:
                        island+=1
                        dfs(grid,i,j,visited)
        return (island)

Output:

1

Q3. Sort Colors
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Follow up:

Could you solve this problem without using the library's sort function?
Could you come up with a one-pass algorithm using only O(1) constant space?
 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
-->
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        start = 0
        i = 0
        end = len(nums)-1
        while i<=end:
            if nums[i] ==2:
                temp = nums[end]
                nums[end] = nums[i]
                nums[i] = temp
                end-= 1
            elif nums[i]==1:
                i+= 1
            elif nums[i]==0:
                temp = nums[start]
                nums[start] = nums[i]
                nums[i] = temp
                start+= 1
                i+= 1

Output:
[0,0,1,1,2,2]

Q4. Palindrome Linked List
Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
-->
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        fast = slow = head

        # find mid point which including (first) mid point into the first half linked list
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        node = None

        # reverse second half linked list
        while slow:
            slow.next, slow, node = node, slow.next, slow

        # compare reversed and original half; must maintain reversed linked list is shorter than 1st half
        while node:
            if node.val != head.val:
                return False
            node = node.next
            head = head.next
        return True

Output:

False