Week 12 Day 04 CC

Q1.Write fibonacci numbers code using top down and bottom up dp
-->
1. Bottom-Up approach
Start computing result for the subproblem. Using the subproblem result solve another subproblem and finally solve the whole problem.

Example
Let's find the nth member of a Fibonacci series.

Fibonacci(0) = 0

Fibonacci(1) = 1

Fibonacci(2) = 1 (Fibonacci(0) + Fibonacci(1))

Fibonacci(3) = 2 (Fibonacci(1) + Fibonacci(2))

We can solve the problem step by step.

1. Find Oth member

2. Find 1st member

3. Calculate the 2nd member using 0th and 1st member

4. Calculate the 3rd member using 1st and 2nd member

5. By doing this we can easily find the nth member.


Algorithm:
1. set Fib[0] = 0

2. set Fib[1] = 1

3. From index 2 to n compute result using the below formula

     Fib[index] = Fib[index - 1] + Fib[index - 2]

4. The final result will be stored in Fib[n].

2.Top-Down approach
Top-Down breaks the large problem into multiple subproblems.

if the subproblem solved already just reuse the answer.

Otherwise, Solve the subproblem and store the result.

Top-Down uses memoization to avoid recomputing the same subproblem again.

Let's solve the same Fibonacci problem using the top-down approach.

Top-Down starts breaking the problem unlike bottom-up.

Like,

If we want to compute Fibonacci(4), the top-down approach will do the following

Fibonacci(4) -> Go and compute Fibonacci(3) and Fibonacci(2) and return the results.

Fibonacci(3) -> Go and compute Fibonacci(2) and Fibonacci(1) and return the results.

Fibonacci(2) -> Go and compute Fibonacci(1) and Fibonacci(0) and return the results.

Finally, Fibonacci(1) will return 1 and Fibonacci(0) will return 0.

                      Fib(4)
                     /    \
                Fib(3)    Fib(2)
               /     \     /   \
          Fib(2)  Fib(1) Fib(1)  Fib(0)
         /    \
    Fib(1) Fib(0)
                            

 

 
We are computing the result of Fib(2) twice.

This can be avoided using memoization.



Algorithm
Fib(n)

   If n == 0 || n == 1 return n;

   Otherwise, compute subproblem results recursively.

   return Fib(n-1) + Fib(n-2);

def fib(n): 
  
    # array declaration 
    f = [0]*(n+1) 
  
    # base case assignment 
    f[1] = 1
  
    # calculating the fibonacci and storing the values 
    for i in xrange(2 , n+1): 
        f[i] = f[i-1] + f[i-2] 
    return f[n] 
  
# Driver program to test the above function 
def main(): 
    n = 9
    print "Fibonacci number is " , fib(n) 
  
if __name__=="__main__": 
    main() 

Output:
 Fibonacci number is 34


Q2.Write calculating Factorial of a number using bottom up dp
-->
The tabulated program for a given problem builds a table in bottom up fashion and returns the last entry from table. For example, for the same Fibonacci number, we first calculate fib(0) then fib(1) then fib(2) then fib(3) and so on. So literally, we are building the solutions of subproblems bottom-up.

Following is the tabulated version for nth Fibonacci Number.

def fib(n): 
  
    # array declaration 
    f = [0]*(n+1) 
  
    # base case assignment 
    f[1] = 1
  
    # calculating the fibonacci and storing the values 
    for i in xrange(2 , n+1): 
        f[i] = f[i-1] + f[i-2] 
    return f[n] 
  
# Driver program to test the above function 
def main(): 
    n = 9
    print "Fibonacci number is " , fib(n) 
  
if __name__=="__main__": 
    main() 

Output:
 Fibonacci number is 34
