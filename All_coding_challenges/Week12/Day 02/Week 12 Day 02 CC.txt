
Q. Implement heap datastructure.
-->

Heap data structure is a complete binary tree that satisfies the heap property. It is also called as a binary heap.

A complete binary tree is a special binary tree in which

every level, except possibly the last, is filled
all the nodes are as far left as possible

Complete binary tree

                     1
                    /  \
                   4     8
                  /  \  /
                  5   2 3


Heap Property is the property of a node in which

(for max heap) key of each node is always greater than its child node/s and the key of the root node is the largest among all other nodes;

(for min heap) key of each node is always smaller than the child node/s and the key of the root node is the smallest among all other nodes.

Heap Operations
Some of the important operations performed on a heap are described below along with their algorithms.

Heapify
Heapify is the process of creating a heap data structure from a binary tree. It is used to create a Min-Heap or a Max-Heap.

Let the input array be

3 9 2 1 4 5  --> Element
0 1 2 3 4 5  --> index

Create a complete binary tree from the array:

                      3
                    /  \
                   9     2
                  /  \  /
                  1   4 5

Start from the first index of non-leaf node whose index is given by n/2 - 1
                      3
                    /  \
                   9     2
                  /  \  /
                  1   4 5
Set current element i as largest.
The index of left child is given by 2i + 1 and the right child is given by 2i + 2.
If leftChild is greater than currentElement (i.e. element at ith index), set leftChildIndex as largest.
If rightChild is greater than element in largest, set rightChildIndex as largest.
Swap largest with currentElement

Repeat steps 3-7 until the subtrees are also heapified.

                      9
                    /  \
                   4     5
                  /  \  /
                  1   3 2

Insert the new element at the end of the tree.

                      9
                    /  \
                   4     5
                  /  \  / \
                  1   3 2   7

Heapify the tree.
                     9
                    /  \
                   4     7
                  /  \  / \
                  1   3 2   5
For Min Heap, the above algorithm is modified so that parentNode is always smaller than newNode.

Delete Element from Heap:

1. Select the element to be deleted.
                       9
                    /    \
                   3        7
                  /  \   / \
                 1   4   2   5
2. Swap it with the last element.
                      
                       9
                    /    \
                   5        7
                  /  \   / \
                 1   4   2   3

3. Remove the last element.
                       9
                    /    \
                   5        7
                  /  \   / \
                 1   4   2   3 -- last element to delete

4. Heapify the tree.
                       9
                    /    \
                   5        7
                  /  \   / 
                 1   4   2   
For Min Heap, above algorithm is modified so that both childNodes are greater smaller than currentNode.

Program:

def heapify(arr, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2 
    
    if l < n and arr[i] < arr[l]:
        largest = l
    
    if r < n and arr[largest] < arr[r]:
        largest = r
    
    if largest != i:
        arr[i],arr[largest] = arr[largest],arr[i]
        heapify(arr, n, largest)

def insert(array, newNum):
    size = len(array)
    if size == 0:
        array.append(newNum)
    else:
        array.append(newNum);
        for i in range((size//2)-1, -1, -1):
            heapify(array, size, i)

def deleteNode(array, num):
    size = len(array)
    i = 0
    for i in range(0, size):
        if num == array[i]:
            break
        
    array[i], array[size-1] = array[size-1], array[i]

    array.remove(size-1)
    
    for i in range((len(array)//2)-1, -1, -1):
        heapify(array, len(array), i)
    
arr = []

insert(arr, 3)
insert(arr, 4)
insert(arr, 9)
insert(arr, 5)
insert(arr, 2)

print ("Max-Heap array: " + str(arr))

deleteNode(arr, 4)
print("After deleting an element: " + str(arr))

Output: 
Max-Heap array: [9, 5, 4, 3, 2]
After deleting an element: [9, 5, 2, 3]





