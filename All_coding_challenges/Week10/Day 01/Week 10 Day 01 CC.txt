Week 10 Day 01 CC

Q1.Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node's value equals the given value. Return the subtree rooted with that node. If such node doesn't exist, you should return NULL.

For example, 

Given the tree:
        4
       / \
      2   7
     / \
    1   3

And the value to search: 2
You should return this subtree:

      2     
     / \   
    1   3
In the example above, if we want to search the value 5, since there is no node with value 5, we should return NULL.

Note that an empty tree is represented by NULL, therefore you would see the expected output (serialized tree format) as [], not null.

-->
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def searchBST(self, root: TreeNode, val: int) -> TreeNode:
        if not root:
            return None

        if root.val < val:
            return self.searchBST(root.right, val)

        if root.val > val:
            return self.searchBST(root.left, val)

        return root

Output:
[2,1,3]

Q2.Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

 

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
-->
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:       
    def kthSmallest(self, root, k):
        self.count, self.ans = 0, 0
        self.travel(root, k)
        return self.ans
    def travel(self, root, k):
        if root == None or self.ans != 0:
            return
        self.travel(root.left, k)
        self.count += 1
        if self.count == k:
            self.ans = root.val
            return
        self.travel(root.right, k)

Output:

1