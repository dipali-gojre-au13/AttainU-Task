Week 09 Day 04 CC

Q1.Binary Tree Preorder Traversal
Given the root of a binary tree, return the preorder traversal of its nodes' values.
   1
    \
       2
     /
    3
Example 1:

Input: root = [1,null,2,3]
Output: [1,2,3]
-->
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        self.ans=[]
        def preorder(root):
            if root is None:
                return
            self.ans.append(root.val)
            preorder(root.left)
            preorder(root.right)
        preorder(root)
        return self.ans

#Output:

Input: root = [1,null,2,3]
Output: [1,2,3]

Q2.Given the root of a binary tree, return the postorder traversal of its nodes' values.
 1
    \
       2
     /
    3
Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]
-->
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        self.ans=[]
        def postorder(root):
            if root is None:
                return
            postorder(root.left)
            postorder(root.right)
            self.ans.append(root.val)
        postorder(root)
        return self.ans

#Output:

Input: root = [1,null,2,3]
Output: [3,2,1]

Q3.Binary Tree Inorder Traversal
Given the root of a binary tree, return the inorder traversal of its nodes' values.

 1
    \
       2
     /
    3

Example:
Input: root = [1,null,2,3]
Output: [1,3,2]
-->
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        self.ans=[]
        def inorder(root):
            if root is None:
                return
            inorder(root.left)
            self.ans.append(root.val)
            inorder(root.right)
        inorder(root)
        return self.ans

#Output:
Input: root = [1,null,2,3]
Output: [1,3,2]